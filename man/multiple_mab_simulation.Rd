% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/multiple_mab_simulation.R
\name{multiple_mab_simulation}
\alias{multiple_mab_simulation}
\title{Conducts Multiple Multi-Arm Bandit Trials with Adaptive Inference in Parallel}
\usage{
multiple_mab_simulation(
  data,
  assignment_method,
  algorithm,
  conditions,
  prior_periods,
  perfect_assignment,
  whole_experiment,
  blocking,
  data_cols,
  times,
  seeds,
  control_augment = 0,
  time_unit = NULL,
  period_length = NULL,
  block_cols = NULL,
  verbose = FALSE,
  keep_data = FALSE
)
}
\arguments{
\item{data}{A data.frame, data.table, or tibble containing input data from the trial. This should be the results
of a traditional Randomized Controlled Trial (RCT). data.frames will be converted to tibbles internally.}

\item{assignment_method}{A character string; one of "Date", "Batch", or "Individual", to define the assignment into treatment waves. When using
"Batch" or "Individual", ensure your dataset is pre-arranged in the proper order observations should be considered so that
groups are assigned correctly. For "Date", observations will be considered in chronological order.
"Individual" assignment can be time-consuming for larger datasets.}

\item{algorithm}{A character string specifying the MAB algorithm to use. Options are "Thompson" or "UCB1".}

\item{conditions}{A named character vector containing treatment conditions. The elements
of this vector should be the names of each treatment as seen in your data, so to create it you can simply call
\code{unique(df$cond)}. The names of each element are used to reference the contents but are not inherently important;
choose names that are meaningful and consistent. If \code{control_augment} > 0, then the control condition
of the trial in this vector must have the name "Control".}

\item{prior_periods}{A numeric value of length 1, or the character string "All"; number of previous periods to use
in the treatment assignment model. This is used to implement the stationary/non-stationary bandit.
For example, a non-stationary bandit assumes the true probability of success for each treatment changes over time, so to
account for that, not all prior data should be used when making decisions because it could be "out of date".}

\item{perfect_assignment}{A logical value; if TRUE, assumes perfect information for treatment assignment
(i.e., all outcomes are observed regardless of the date).
If FALSE, hides outcomes not yet theoretically observed, based
on the dates treatments would have been assigned for each wave.
This is useful when simulating batch-based assignment where treatments were assigned
on a given day whether or not all the information from a prior batch was available and
you have exact dates treatments were assigned.}

\item{whole_experiment}{A logical value; if TRUE, uses all past experimental data for imputing outcomes.
If FALSE, uses only data available up to the current period. In large datasets or with a high number
of periods, setting this to FALSE can be more computationally intensive, though not a significant
contributor to total runtime.}

\item{blocking}{A logical value; whether or not to use treatment blocking. Treatment blocking is used to ensure an even-enough
distribution of treatment conditions across blocks. For example, blocking by gender would mean the randomized assignment should
split treatments evenly not just throughout the sample (so for 4 arms, 25-25-25-25), but also within each block, so 25\% of men
would receive each treatment and 25\% of women the same.}

\item{data_cols}{A named character vector containing the names of columns in \code{data} as strings:
\itemize{
\item \code{id_col}: Column in \code{data}; contains unique ID as a key.
\item \code{success_col}: Column in \code{data}; binary successes from the original experiment.
\item \code{condition_col}: Column in \code{data}; original treatment condition for each observation.
\item \code{date_col}: Column in \code{data}; contains original date of event/trial. Only necessary when assigning by "Date". Must be of type \code{Date}, not a character string.
\item \code{month_col}: Column in \code{data}; contains month of treatment. Only necessary when \code{time_unit = "Month"}. This can be a string or factor variable
containing the names or numbers of months.
\item \code{success_date_col}: Column in \code{data}; contains original dates each success occurred. Only necessary when \code{perfect_assignment = FALSE}. Must be of type \code{Date}, not a character string.
\item \code{assignment_date_col}: Column in \code{data}; contains original dates treatments were assigned to observations. Only necessary when \code{perfect_assignment = FALSE}.
Used to simulate imperfect information on the part of researchers conducting an adaptive trial. Must be of type \code{Date}, not a character string.
}}

\item{times}{Integer; number of simulations to conduct.}

\item{seeds}{Integer vector of \code{length(times)} containing valid seeds to define random state for each trial.}

\item{control_augment}{A numeric value in \link{0, 1}; proportion of each wave guaranteed to receive the "Control" treatment.
Default is 0.}

\item{time_unit}{A character string specifying the unit of time for assigning periods when \code{assignment_method} is "Date".
Acceptable values are "Day", "Week", or "Month".}

\item{period_length}{A numeric value of length 1; represents the length of each treatment period.
If assignment method is "Date", this refers to the
length of periods by your specified \code{time_unit} (i.e., if "Day", 10 would be 10 days).
If assignment method is "Batch", this refers to the number of people in each batch. This factor
contributes most to the computational cost of calling the function, as large batch sizes make each iteration of
the simulation run slower, while each additional period adds time because of the extra iterations.
If you have a large dataset, consider passing it as a \code{data.table}.}

\item{block_cols}{A character vector of variables to block by. This vector should not be named.}

\item{verbose}{Logical; Toggles progress bar from \code{\link[furrr:future_map]{furrr::future_map()}}.}

\item{keep_data}{Logical; Whether or not to keep the final data from each trial. Recommended FALSE for large datasets
.}
}
\value{
\code{multiple.mab} class object, which is a named list containing:
\itemize{
\item \verb{final_data_nest:} Data.frame containing a nested data.frame with the final data from each trial
\item \verb{bandits:} Data.frame containing the Thompson/UCB1 statistics across all treatments, periods, and trials
\item \verb{estimates:} Data.frame containing the AIPW statistics across all treatments, and trials
\item \code{settings}: A list of the configuration settings used in the trial.
}
}
\description{
Repeated Multi-Arm Bandit Simulations with the same settings in different
random states. Allows for parallel processing using \code{\link[future:plan]{future::plan()}} and \code{\link[furrr:future_map]{furrr::future_map()}}.
}
\examples{
# Multiple_mab_simulation() is a useful tool for running multiple trials
# using the same configuration settings, in different random states
data(tanf)
# Subsetting to make the example faster
tanf <- tanf[1:50, ]

# The seeds passed must be integers, so it is highly recommended to create them
# before using `sample.int()`
set.seed(1)
seeds <- sample.int(10000, 5)
conditions <- c("no_letter", "open_appt", "specific_appt")

# For this example, period_length is set a large interval and
# times is low to keep run time short.
start <- proc.time()
x <- multiple_mab_simulation(
  data = tanf,
  assignment_method = "Batch",
  period_length = 25,
  whole_experiment = TRUE,
  blocking = FALSE,
  perfect_assignment = TRUE,
  algorithm = "Thompson",
  prior_periods = "All",
  control_augment = 0,
  conditions = conditions,
  data_cols = c(
    condition_col = "condition",
    id_col = "id",
    success_col = "success"
  ),
  verbose = FALSE, times = 5, seeds = seeds, keep_data = TRUE
)
seq_time <- proc.time() - start
print(x)

# Its Recommenced to set keep_data at FALSE unless necessary to avoid
# the output from taking up to much memory
# Keep TRUE
object.size(x)
x$final_data_nest <- NULL
# Size if Keep was FALSE
object.size(x)

# multiple_mab_simulation() is implemented using furrr::future_map()
# so you can also run simulations in parallel using futures.
# Simply run your preferred plan and number of cores before multiple_mab_simulation.
# Like: 
\dontrun{

  future::plan("plan", workers = n)
  multiple_mab_simulation(data = tanf,
                          assignment_method = "Batch",
                          period_length = 25,
                          whole_experiment = TRUE,
                          blocking = FALSE,
                          perfect_assignment = TRUE,
                          algorithm = "Thompson",
                          prior_periods = "All",
                          control_augment = 0,
                          conditions = conditions,
                          data_cols = c(
                            condition_col = "condition",
                            id_col = "id",
                            success_col = "success"
                          ),
                          verbose = FALSE, times = 5, seeds = seeds, keep_data = TRUE
  )
  future::plan("sequential")
}
# If your on Windows plan needs to be multisession
# If your on Unix (MacOS/Linux) you can use multicore or multisession
# If your running the code on a high performance cluster, look into
# using the future.batchtools API for whichever scheduler is used

# Check the future and furrr documentation for more details on possible options
}
\references{
Hadad, Vitor, David A. Hirshberg, Ruohan Zhan, Stefan Wager, and Susan Athey. 2021.
“Confidence Intervals for Policy Evaluation in Adaptive Experiments.” Proceedings of the National Academy of Sciences of the United States of America 118
(15): e2014602118. \url{https://doi.org/10.1073/pnas.2014602118}.

Loecher, Thomas Lotze and Markus. 2022.
“Bandit: Functions for Simple a/B Split Test and Multi-Armed Bandit Analysis.”
\url{https://cran.r-project.org/web/packages/bandit/index.html}.

Offer‐Westort, Molly, Alexander Coppock, and Donald P. Green. 2021.
“Adaptive Experimental Design: Prospects and Applications in Political Science.”
American Journal of Political Science 65 (4): 826–44. \url{https://doi.org/10.1111/ajps.12597}.
}
\seealso{
\itemize{
\item \code{\link[=run_mab_trial]{run_mab_trial()}}
\item \code{\link[=get_adaptive_aipw]{get_adaptive_aipw()}}
\item \code{\link[=check_args]{check_args()}}
\item \code{\link[=single_mab_simulation]{single_mab_simulation()}}
\item \code{\link[=mab_simulation]{mab_simulation()}}
\item \code{\link[=pre_mab_simulation]{pre_mab_simulation()}}
\item \code{\link[furrr:future_map]{furrr::future_map()}}
\item \code{\link[future:plan]{future::plan()}}
}
}
